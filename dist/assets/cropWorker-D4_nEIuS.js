(function(){"use strict";self.onmessage=async d=>{const{imageFile:s,sourceX:l,sourceY:g,sourceWidth:i,sourceHeight:c,outputWidth:n,outputHeight:t,outputFormat:k,quality:W,filename:e,originalFileId:a,faceIndex:r}=d.data;if(console.log(`[Worker] Received task for: ${e}, Face Index: ${r}, Original ID: ${a}`),console.log(`[Worker] Crop Params: X:${l}, Y:${g}, W:${i}, H:${c}`),console.log(`[Worker] Output Dims: W:${n}, H:${t}`),!s){console.error(`[Worker] FATAL: imageFile is undefined for ${e}`),self.postMessage({status:"error",error:"imageFile was undefined in worker",filename:e,originalFileId:a,faceIndex:r});return}console.log(`[Worker] imageFile name: ${s.name}, size: ${s.size}, type: ${s.type}`);try{console.log(`[Worker] Attempting createImageBitmap for ${e}...`);const o=await createImageBitmap(s);if(console.log(`[Worker] createImageBitmap SUCCESS for ${e}. Dimensions: ${o.width}x${o.height}`),i<=0||c<=0||n<=0||t<=0)throw console.error(`[Worker] Invalid crop dimensions for ${e}:`,{sourceWidth:i,sourceHeight:c,outputWidth:n,outputHeight:t}),new Error("Invalid crop dimensions received by worker.");console.log(`[Worker] Creating OffscreenCanvas for ${e}...`);const f=new OffscreenCanvas(n,t),$=f.getContext("2d");if(!$)throw console.error(`[Worker] Failed to get 2D context for ${e}`),new Error("Failed to get 2D context from OffscreenCanvas");console.log(`[Worker] OffscreenCanvas context obtained for ${e}.`),console.log(`[Worker] Drawing image to OffscreenCanvas for ${e}...`),$.drawImage(o,l,g,i,c,0,0,n,t),console.log(`[Worker] Image drawn for ${e}. Closing bitmap.`),o.close(),console.log(`[Worker] Converting canvas to blob for ${e}...`);const m=await f.convertToBlob({type:k,quality:W});console.log(`[Worker] Canvas converted to blob for ${e}. Size: ${m.size}`),console.log(`[Worker] Posting 'cropped' message for ${e}, Face: ${r}`),self.postMessage({status:"cropped",blob:m,filename:e,originalFileId:a,faceIndex:r})}catch(o){console.error(`[Worker] CATCH BLOCK for ${e}, Face Index: ${r}, Original ID: ${a}`),console.error(`[Worker] Error message: ${o.message}`),console.error(`[Worker] Error stack: ${o.stack}`),console.error("[Worker] Error object:",o),self.postMessage({status:"error",error:o.message||"Unknown worker error",filename:e,originalFileId:a,faceIndex:r})}}})();
